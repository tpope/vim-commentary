*commentary.txt*  Comment stuff out

Author:  Tim Pope <http://tpo.pe/>
License: Same terms as Vim itself (see |license|)

Comment stuff out.  Then uncomment it later.  Relies on 'commentstring' to be
correctly set.

The gc mappings are preferred, while the \\ mappings are provided for
backwards compatibility.

                                                *gc* *\\*
gc{motion}              Comment or uncomment lines that {motion} moves over.
\\{motion}

                                                *gcc* *\\\*
gcc                     Comment or uncomment [count] lines.
\\\

                                                *v_gc* *v_\\*
{Visual}gc              Comment or uncomment the highlighted lines.
{Visual}\\

                                                *gcu* *\\u*
gcu                     Uncomment the current and adjacent commented lines.
\\u


The CommentaryPost autocommand can be used to extend commentary. It is fired
after the lines are commented/uncommented. The example below shows how to add
a set of mappings that uses a modified 'commentstring': >

   let g:commentary_suffix = ' XXX'
   func! CommentarySetSuffix()
      exe "setl commentstring=" . escape(substitute(&commentstring, '\ze%s', 
               \ g:commentary_suffix, ''), ' "')
      augroup CommentarySuffix
         au!
         autocmd User CommentaryPost call CommentaryRemoveSuffix()
      augroup END
   endfunc
   func! CommentaryRemoveSuffix()
      exe "setl commentstring=" . escape(substitute(&commentstring, 
               \ g:commentary_suffix . '\ze%s', '', ''), ' "')
      au! CommentarySuffix
   endfunc
   xmap <silent> gx  :<C-U>call CommentarySetSuffix()<CR>gv<Plug>Commentary
   nmap <silent> gx  :call CommentarySetSuffix()<CR><Plug>Commentary
   nmap <silent> gxx :call CommentarySetSuffix()<CR><Plug>CommentaryLine
   nmap <silent> gxu :call CommentarySetSuffix()<CR><Plug>CommentaryUndo
<
 vim:tw=78:et:ft=help:norl:
